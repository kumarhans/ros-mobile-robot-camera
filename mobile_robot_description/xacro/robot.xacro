<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="mobile_robot">
  <xacro:macro name="default_inertial" params="mass">
    <inertial>
      <mass value="${mass}"/>
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
    </inertial>
  </xacro:macro>
  <xacro:macro name="default_inertial" params="mass">
    <inertial>
      <mass value="${mass}"/>
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="wheel" params="name x y">
    <link name="${name}">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder length="0.04" radius="0.1"/>
        </geometry>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder length="0.04" radius="0.1"/>
        </geometry>
      </collision>
      <xacro:default_inertial mass="0.6"/>
    </link>

    <joint name="base_link_${name}" type="continuous">
      <origin xyz="${y*0.25} ${x*0.25} 0" rpy="0 0 0"/>
      <axis rpy="0 0 0" xyz="0 1 0"/>
      <parent link="base_link"/>
      <child link="${name}"/>
    </joint>

    <transmission name="base_link_${name}_wheel_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <actuator name="base_link_${name}_wheel_motor">
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
      <joint name="base_link_${name}">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      </joint>
    </transmission>
  </xacro:macro>

  <link name="base_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.6 0.4 0.10"/>
      </geometry>
      <material name="acrylic">
        <color rgba="1 1 1 0.8"/>
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.6 0.4 0.10"/>
      </geometry>
    </collision>
    <xacro:default_inertial mass="20"/>
  </link>

  <joint name="cam_stand_joint" type="fixed">
    <origin xyz="0.0 0.0 0.45" rpy="0 0 0" />
    <parent link="base_link"/>
    <child link="cam_stand" />
  </joint>

  <!-- the model -->
  <link name="cam_stand">
    <inertial>
      <mass value="1" />
      <origin xyz="0 0 0.00" />
      <inertia ixx="1.0" ixy="0.0" ixz="0.0"
        iyy="1.0" iyz="0.0"
        izz="1.0" />
    </inertial>
    <visual>
      <geometry>
        <box size=".1 .1 .9" /> <!-- does not need to match collision -->
      </geometry>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.6 0.4 0.10"/>
      </geometry>
    </collision>
  </link>


 

   <joint name="cam_prismatic" type="prismatic">
      <child link="cam_stand_primsatic" />
      <parent link="cam_stand"/>
      <origin xyz="0.0 0 0.475" rpy="0 0 0"/>
      <axis xyz="0 0 -1"/>
      <limit effort="1000.0" lower="-0.2" upper="0.2" velocity="0.5"/>
    </joint>

 

  <transmission name="cam_prismatic_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="cam_prismatic">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="motorToCamPris">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>


  <link name="cam_stand_primsatic">
    <inertial>
      <mass value=".1" />
      <origin xyz="0 0 0.00" />
      <inertia ixx="1.0" ixy="0.0" ixz="0.0"
        iyy="1.0" iyz="0.0"
        izz="1.0" />
    </inertial>
    <visual>
      <geometry>
        <box size="0.01 0.01 0.01" /> <!-- does not need to match collision -->
      </geometry>
    </visual>
  </link>
 

   <joint name="cam_revolute" type="continuous">
      <origin xyz="0.0 0.0 0.0" rpy="0 0 0"/>
      <axis rpy="0 0 0" xyz="0 1 0"/>
      <parent link="cam_stand_primsatic"/>
      <child link="cam"/>
    </joint>

     
  <transmission name="cam_revolute_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="cam_revolute">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="motorToCamRev">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>



  <link name="cam">
    <inertial>
      <mass value=".1" />
      <origin xyz="0 0 0.00" />
      <inertia ixx="1.0" ixy="0.0" ixz="0.0"
        iyy="1.0" iyz="0.0"
        izz="1.0" />
    </inertial>
    <visual>
      <geometry>
        <box size="0.15 0.15 0.15" /> <!-- does not need to match collision -->
      </geometry>
    </visual>
  </link>

  

  <gazebo reference="cam">
    <gravity>true</gravity>
    <sensor name="imu_sensor" type="imu">
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <topic>camera_imu</topic>
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <topicName>camera_imu</topicName>
        <bodyName>cam</bodyName>
        <updateRateHZ>100.0</updateRateHZ>
        <gaussianNoise>0.001</gaussianNoise>
        <xyzOffset>0 0 0</xyzOffset>
        <rpyOffset>0 0 0</rpyOffset>
        <frameName>cam</frameName>
        <initialOrientationAsReference>false</initialOrientationAsReference>
      </plugin>
      <pose>0 0 0 0 0 0</pose>
    </sensor>
  </gazebo>


    <gazebo reference="cam">
    <sensor type="multicamera" name="stereo_camera">
      <update_rate>30.0</update_rate>
      <camera name="left">
        <horizontal_fov>1.047</horizontal_fov>
            <image>
                <width>640</width>
                <height>480</height>
                <format>RGB_INT8</format>
            </image>
        <clip>
          <near>0.1</near>
          <far>100</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.0001</stddev>
        </noise>
      </camera>
      <camera name="right">
        <pose>0 -0.1 0 0 0 0</pose>
        <horizontal_fov>1.047</horizontal_fov>
            <image>
                <width>640</width>
                <height>480</height>
                <format>RGB_INT8</format>
            </image>
        <clip>
          <near>0.1</near>
          <far>100</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.0001</stddev>
        </noise>
      </camera>
      <plugin name="stereo_camera_controller" filename="libgazebo_ros_multicamera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>simulated/camera</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>left_camera_optical_frame</frameName>
        <!--<rightFrameName>right_camera_optical_frame</rightFrameName>-->
        <hackBaseline>0.1</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>


    

  <xacro:wheel name="wh_left_back" x="1" y="-1"/>
  <xacro:wheel name="wh_right_back" x="-1" y="-1"/>
  <xacro:wheel name="wh_left_front" x="1" y="1"/>
  <xacro:wheel name="wh_right_front" x="-1" y="1"/>

  


  <!-- =================== Gazebo ==================== -->
  <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/</robotNamespace>
    </plugin>
  </gazebo>
</robot>

 